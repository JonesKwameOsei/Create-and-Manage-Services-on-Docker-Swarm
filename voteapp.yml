version: "3.8"

services:
  vote:
    image: dockersamples/examplevotingapp_vote:latest
    ports:
      - "80:80"
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: "0.25"
          memory: "256M"
      restart_policy:
        condition: on-failure
    networks:
      - frontend

  redis:
    image: redis:alpine
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.25"
          memory: "256M"
      restart_policy:
        condition: on-failure
    networks:
      - frontend

  worker:
    image: dockersamples/examplevotingapp_worker:latest
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
      restart_policy:
        condition: on-failure
    networks:
      - frontend
      - backend

  db:
    image: postgres:9.4
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.25"
          memory: "256M"
      restart_policy:
        condition: on-failure
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - backend

  result:
    image: dockersamples/examplevotingapp_result:latest
    ports:
      - "5001:80"
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.25"
          memory: "256M"
      restart_policy:
        condition: on-failure
    networks:
      - backend

  visualizer:
    image: dockersamples/visualizer:latest
    ports:
      - "8080:8080"
    deploy:
      placement:
        constraints: [node.role == manager]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - frontend

networks:
  frontend:
  backend:

volumes:
  db-data:
